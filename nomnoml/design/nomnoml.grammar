%lex
%%

\n                            return 'NL'
'|'                           return '|'
";"                           return ';'
"<"                           return '<'
">"                           return '>'
[\s]*[\[]                     return '('
[\]][\s]*                     return ')'
[\s]*[^\]]*[-][>][^\[]*[\s]*  return '-'
[-0-9a-zA#+~*: ]+             return 'STRING'
<<EOF>>                       return 'EOF'
.                             return 'INVALID'

/lex

%start expressions

%% /* language grammar */

expressions
    : entity EOF               {return $1;}
    | parts EOF                {return {parts:$1};}
    ;

separator : NL | ';' | separator ';' | separator NL;
relation : '-';
entity : classifier | relation | STRING | '|';

relation
    : classifier relation classifier
        {$$ = {type:$2, start:$1, end:$3};}
    | classifier relation STRING classifier
        {$$ = {type:$2, start:$1, end:$4, endLabel:$3};}
    | classifier STRING relation classifier
        {$$ = {type:$3, start:$1, startLabel:$2, end:$4};}
    | classifier STRING relation STRING classifier
        {$$ = {type:$3, start:$1, startLabel:$2, end:$4, endLabel:$5};}
    ;

classifier
    : '(' entity ')'           {$$ = {parts:[$2]};}
    | '(' '<' STRING '>' entity ')'  {$$ = {type:$3,parts:[$5]};}
    | '(' parts ')'            {$$ = {parts:$2};}
    | '(' '<' STRING '>' parts ')'  {$$ = {type:$3,parts:$5};}
    ;

parts
    : entity separator entity        {$$ = [$1,$3];}
    | parts separator entity         {$$ = $1.concat($3);}
    | entity '|' entity  {$$ = [$1,'|',$3];}
    | parts '|' entity   {$$ = $1.concat('|',$3);}
    ;